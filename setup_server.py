#!/usr/bin/env python3
"""
Server Configuration Setup Script
This script helps you configure your server settings for the Telegram bot.
"""

import os
import sys

def get_user_input(prompt, default=""):
    """Get user input with a default value"""
    if default:
        user_input = input(f"{prompt} (default: {default}): ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()

def create_config_file():
    """Create or update the config.py file with user input"""
    
    print("üöÄ Server Configuration Setup")
    print("=" * 50)
    print("This script will help you configure your server settings.")
    print("You can press Enter to use the default values shown in parentheses.\n")
    
    # Get server information
    server_domain = get_user_input("Enter your server domain (e.g., yourdomain.com)", "your-domain.com")
    server_ip = get_user_input("Enter your server IP address", "your-server-ip")
    
    # Get X-UI configuration
    xui_port = get_user_input("Enter X-UI panel port", "3030")
    xui_path = get_user_input("Enter X-UI panel path", "RZElYrcIBosloBn")
    xui_username = get_user_input("Enter X-UI username", "admin")
    xui_password = get_user_input("Enter X-UI password", "admin")
    
    # Get bot token
    bot_token = get_user_input("Enter your Telegram bot token", "8173740886:AAGKTILpDMFKNGGoswWNQDLFjy40QVsrCao")
    
    # Create the config content
    config_content = f'''# Server Configuration
# Generated by setup_server.py

# Your server domain (for public access)
SERVER_DOMAIN = "{server_domain}"

# Your server IP address (for internal API calls)
SERVER_IP = "{server_ip}"

# X-UI Panel Configuration
XUI_PORT = "{xui_port}"
XUI_PATH = "{xui_path}"
XUI_USERNAME = "{xui_username}"
XUI_PASSWORD = "{xui_password}"

# Construct URLs
BASE_URL = f"https://{{SERVER_DOMAIN}}"  # For web apps and public access
XUI_BASE_URL = f"http://{{SERVER_IP}}:{{XUI_PORT}}"  # For internal X-UI API calls

# Bot Configuration
BOT_TOKEN = "{bot_token}"

# Django Configuration
DJANGO_SETTINGS_MODULE = "cafe_bot_dashboard.settings"

# Configuration Notes:
# - SERVER_DOMAIN: Used for public web app URLs and VLESS URLs
# - SERVER_IP: Used for internal X-UI API calls
# - If you don't have a domain, you can use your server IP for both
# - Make sure your firewall allows access to the X-UI port
'''
    
    # Write the config file
    with open('config.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("\n‚úÖ Configuration file created successfully!")
    print(f"üìÅ Config file: {os.path.abspath('config.py')}")
    
    # Show summary
    print("\nüìã Configuration Summary:")
    print(f"   Server Domain: {server_domain}")
    print(f"   Server IP: {server_ip}")
    print(f"   X-UI URL: http://{server_ip}:{xui_port}/{xui_path}")
    print(f"   Web App Base URL: https://{server_domain}")
    
    # Show next steps
    print("\nüöÄ Next Steps:")
    print("1. Make sure your X-UI panel is running and accessible")
    print("2. Ensure your server firewall allows access to the X-UI port")
    print("3. If using a domain, make sure DNS is configured correctly")
    print("4. Test the configuration by running your bot")
    
    return True

def validate_config():
    """Validate the current configuration"""
    try:
        from config import SERVER_DOMAIN, SERVER_IP, XUI_PORT, XUI_PATH, BASE_URL, XUI_BASE_URL
        print("‚úÖ Configuration file is valid")
        print(f"   Server Domain: {SERVER_DOMAIN}")
        print(f"   Server IP: {SERVER_IP}")
        print(f"   X-UI URL: {XUI_BASE_URL}/{XUI_PATH}")
        print(f"   Web App Base URL: {BASE_URL}")
        return True
    except ImportError as e:
        print(f"‚ùå Configuration error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Configuration validation failed: {e}")
        return False

def main():
    """Main function"""
    if len(sys.argv) > 1 and sys.argv[1] == "validate":
        return validate_config()
    
    if os.path.exists('config.py'):
        print("‚ö†Ô∏è  config.py already exists!")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != 'y':
            print("Configuration setup cancelled.")
            return False
    
    return create_config_file()

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 